// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature}
 */
public final class FileSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature)
    FileSignatureOrBuilder {
  // Use FileSignature.newBuilder() to construct.
  private FileSignature(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private FileSignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final FileSignature defaultInstance;
  public static FileSignature getDefaultInstance() {
    return defaultInstance;
  }

  public FileSignature getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private FileSignature(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            fileIdentifier_ = input.readInt32();
            break;
          }
          case 18: {
            org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000002;
            name_ = bs;
            break;
          }
          case 24: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              fqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            fqName_.add(input.readInt32());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              fqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              fqName_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        fqName_ = java.util.Collections.unmodifiableList(fqName_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<FileSignature> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<FileSignature>() {
    public FileSignature parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new FileSignature(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<FileSignature> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int FILE_IDENTIFIER_FIELD_NUMBER = 1;
  private int fileIdentifier_;
  /**
   * <code>optional int32 file_identifier = 1 [default = -1];</code>
   *
   * <pre>
   * An identifier of this file in the current module, used to distinguish files with matching names and packages
   * (we unfortunately allow this at the moment).
   * </pre>
   */
  public boolean hasFileIdentifier() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int32 file_identifier = 1 [default = -1];</code>
   *
   * <pre>
   * An identifier of this file in the current module, used to distinguish files with matching names and packages
   * (we unfortunately allow this at the moment).
   * </pre>
   */
  public int getFileIdentifier() {
    return fileIdentifier_;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private java.lang.Object name_;
  /**
   * <code>optional string name = 2;</code>
   *
   * <pre>
   * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
   * </pre>
   */
  public boolean hasName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional string name = 2;</code>
   *
   * <pre>
   * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
   * </pre>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      org.jetbrains.kotlin.protobuf.ByteString bs = 
          (org.jetbrains.kotlin.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        name_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string name = 2;</code>
   *
   * <pre>
   * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
   * </pre>
   */
  public org.jetbrains.kotlin.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      org.jetbrains.kotlin.protobuf.ByteString b = 
          org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (org.jetbrains.kotlin.protobuf.ByteString) ref;
    }
  }

  public static final int FQ_NAME_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Integer> fqName_;
  /**
   * <code>repeated int32 fq_name = 3 [packed = true];</code>
   */
  public java.util.List<java.lang.Integer>
      getFqNameList() {
    return fqName_;
  }
  /**
   * <code>repeated int32 fq_name = 3 [packed = true];</code>
   */
  public int getFqNameCount() {
    return fqName_.size();
  }
  /**
   * <code>repeated int32 fq_name = 3 [packed = true];</code>
   */
  public int getFqName(int index) {
    return fqName_.get(index);
  }
  private int fqNameMemoizedSerializedSize = -1;

  private void initFields() {
    fileIdentifier_ = -1;
    name_ = "";
    fqName_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, fileIdentifier_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBytes(2, getNameBytes());
    }
    if (getFqNameList().size() > 0) {
      output.writeRawVarint32(26);
      output.writeRawVarint32(fqNameMemoizedSerializedSize);
    }
    for (int i = 0; i < fqName_.size(); i++) {
      output.writeInt32NoTag(fqName_.get(i));
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(1, fileIdentifier_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBytesSize(2, getNameBytes());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < fqName_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(fqName_.get(i));
      }
      size += dataSize;
      if (!getFqNameList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      fqNameMemoizedSerializedSize = dataSize;
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.FileSignatureOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      fileIdentifier_ = -1;
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = "";
      bitField0_ = (bitField0_ & ~0x00000002);
      fqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature result = new org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.fileIdentifier_ = fileIdentifier_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.name_ = name_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        fqName_ = java.util.Collections.unmodifiableList(fqName_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.fqName_ = fqName_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature.getDefaultInstance()) return this;
      if (other.hasFileIdentifier()) {
        setFileIdentifier(other.getFileIdentifier());
      }
      if (other.hasName()) {
        bitField0_ |= 0x00000002;
        name_ = other.name_;
        
      }
      if (!other.fqName_.isEmpty()) {
        if (fqName_.isEmpty()) {
          fqName_ = other.fqName_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureFqNameIsMutable();
          fqName_.addAll(other.fqName_);
        }
        
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int fileIdentifier_ = -1;
    /**
     * <code>optional int32 file_identifier = 1 [default = -1];</code>
     *
     * <pre>
     * An identifier of this file in the current module, used to distinguish files with matching names and packages
     * (we unfortunately allow this at the moment).
     * </pre>
     */
    public boolean hasFileIdentifier() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 file_identifier = 1 [default = -1];</code>
     *
     * <pre>
     * An identifier of this file in the current module, used to distinguish files with matching names and packages
     * (we unfortunately allow this at the moment).
     * </pre>
     */
    public int getFileIdentifier() {
      return fileIdentifier_;
    }
    /**
     * <code>optional int32 file_identifier = 1 [default = -1];</code>
     *
     * <pre>
     * An identifier of this file in the current module, used to distinguish files with matching names and packages
     * (we unfortunately allow this at the moment).
     * </pre>
     */
    public Builder setFileIdentifier(int value) {
      bitField0_ |= 0x00000001;
      fileIdentifier_ = value;
      
      return this;
    }
    /**
     * <code>optional int32 file_identifier = 1 [default = -1];</code>
     *
     * <pre>
     * An identifier of this file in the current module, used to distinguish files with matching names and packages
     * (we unfortunately allow this at the moment).
     * </pre>
     */
    public Builder clearFileIdentifier() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fileIdentifier_ = -1;
      
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        org.jetbrains.kotlin.protobuf.ByteString bs =
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
     * </pre>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
     * </pre>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      name_ = value;
      
      return this;
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
     * </pre>
     */
    public Builder clearName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = getDefaultInstance().getName();
      
      return this;
    }
    /**
     * <code>optional string name = 2;</code>
     *
     * <pre>
     * Marked optional for compatibility, because previously we serialized file signatures as an empty structure.
     * </pre>
     */
    public Builder setNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      name_ = value;
      
      return this;
    }

    private java.util.List<java.lang.Integer> fqName_ = java.util.Collections.emptyList();
    private void ensureFqNameIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        fqName_ = new java.util.ArrayList<java.lang.Integer>(fqName_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getFqNameList() {
      return java.util.Collections.unmodifiableList(fqName_);
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public int getFqNameCount() {
      return fqName_.size();
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public int getFqName(int index) {
      return fqName_.get(index);
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder setFqName(
        int index, int value) {
      ensureFqNameIsMutable();
      fqName_.set(index, value);
      
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder addFqName(int value) {
      ensureFqNameIsMutable();
      fqName_.add(value);
      
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder addAllFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, fqName_);
      
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder clearFqName() {
      fqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature)
  }

  static {
    defaultInstance = new FileSignature(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature)
}

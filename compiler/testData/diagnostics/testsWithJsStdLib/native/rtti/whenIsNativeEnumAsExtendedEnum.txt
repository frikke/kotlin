package

public fun box(/*0*/ a: kotlin.Any): kotlin.Int

public final external enum class Foo1 : kotlin.Enum<Foo1> {
    enum entry A

    enum entry B

    private constructor Foo1()
    @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: Foo1): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<Foo1>
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Foo1
    public final /*synthesized*/ fun values(): kotlin.Array<Foo1>
}

public final external enum class Foo2 : kotlin.Enum<Foo2> {
    enum entry A

    enum entry B

    private constructor Foo2()
    @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: Foo2): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<Foo2>
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Foo2
    public final /*synthesized*/ fun values(): kotlin.Array<Foo2>
}

